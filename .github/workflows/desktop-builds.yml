name: Build and Release Executable

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: 3.12.6

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable with flet
        run: flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description "XC Created By wikm" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./dist/XC.exe ./release/
          cp -r ./GUI-ver/subs ./release/
          powershell Compress-Archive -Path ./release/* -DestinationPath ./release/XC-windows.zip

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: windows-release
          path: ./release/XC-windows.zip

  build-cli:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./CLI/CLI.py ./release/
          cp -r ./CLI/convert.py ./release/
          cp -r ./CLI/const.py ./release/
          cp -r ./CLI/requirements.txt ./release/
          powershell Compress-Archive -Path ./release/* -DestinationPath ./release/XC-CLI.zip

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: cli-release
          path: ./release/XC-CLI.zip

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable with flet
        run: flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description "XC Created By wikm" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./dist/XC ./release/
          cp -r ./GUI-ver/subs ./release/
          zip -r ./release/XC-ubuntu.zip ./release/

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-release
          path: ./release/XC-ubuntu.zip

  build-fedora:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if Docker is Installed
        run: docker --version || echo "Docker not found. Installing..."

      - name: Install Docker dependencies (if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

      - name: Add Dockerâ€™s official GPG key and repository
        run: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

      - name: Install Docker
        run: sudo apt-get install -y docker-ce

      - name: Start Docker
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Pull Fedora image
        run: docker pull fedora:latest

      - name: Run build in Fedora container
        run: |
          docker run -v ${{ github.workspace }}:/app -w /app fedora:latest bash -c "
            dnf update -y &&
            dnf install -y python3 python3-pip binutils zip gcc libffi-devel &&
            pip3 install --upgrade pip &&
            pip3 install pyinstaller &&
            pip3 install -r requirements.txt &&
            flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description \"XC Created By wikm\" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm &&
            ls -lah ./dist/
          "

      - name: Preprocess Release Files
        run: |
          mkdir -p release
          cp -r ./dist/XC ./release/
          zip -r ./release/XC-fedora.zip ./release/

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: fedora-release
          path: ./release/XC-fedora.zip
        
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install pillow
          pip install -r requirements.txt
          pip install pyobjc-core pyobjc-framework-Cocoa # Required for macOS GUI
          
      - name: Create debug logger
        run: |
          echo '
          import logging
          import sys
          
          # Setup logging
          logging.basicConfig(
              level=logging.DEBUG,
              format="%(asctime)s [%(levelname)s] %(message)s",
              handlers=[
                  logging.FileHandler("debug.log"),
                  logging.StreamHandler(sys.stdout)
              ]
          )
          
          import flet as ft
          from backend import XrayBackend
          import threading
          import os
          from collections import deque
          import time
          import checkver
          import json
          
          logging.debug("Starting imports completed")
          
          class XrayClientUI:
              def __init__(self, page: ft.Page):
                  logging.debug("Initializing XrayClientUI")
          
          def main(page: ft.Page):
              try:
                  logging.debug("Starting main function")
                  XrayClientUI(page)
              except Exception as e:
                  logging.error(f"Error in main: {str(e)}", exc_info=True)
          
          if __name__ == "__main__":
              try:
                  logging.debug("Starting application")
                  ft.app(target=main)
              except Exception as e:
                  logging.error(f"Application failed to start: {str(e)}", exc_info=True)
          ' > ./GUI-ver/GUI.py
          
      - name: Build executable with PyInstaller
        run: flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description "XC Created By wikm" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm
          
      - name: Set executable permissions
        run: |
          chmod +x ./dist/XC.app/Contents/MacOS/XC
          
      - name: Test executable
        run: |
          ./dist/XC.app/Contents/MacOS/XC &
          sleep 5
          # Check if process is running
          ps aux | grep XC
          # Capture any logs
          if [ -f debug.log ]; then
            echo "Debug log contents:"
            cat debug.log
          fi
          
      - name: Create release directory and copy files
        run: |
          mkdir -p release/XC
          cp -R ./dist/XC.app release/XC/
          cp -R ./GUI-ver/subs release/XC/
          
      - name: Create ZIP archive
        run: |
          cd release
          zip -r XC-macos.zip XC
          cd ..
          
      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: macos-release
          path: ./release/XC-macos.zip
          
      - name: Upload Debug Logs
        uses: actions/upload-artifact@v3
        with:
          name: debug-logs
          path: |
            debug.log
            ./dist/XC.app/Contents/MacOS/debug.log

  github-release:
    name: Upload to GitHub Release
    needs: [build-windows, build-ubuntu, build-fedora, build-macos , build-cli]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: windows-release
          path: ./release/windows/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-release
          path: ./release/ubuntu/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: fedora-release
          path: ./release/fedora/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: macos-release
          path: ./release/macos/
      
      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: cli-release
          path: ./release/cli/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release create
          "v4.1-${{ github.run_number }}"
          --repo "${{ github.repository }}"
          --notes ""
          --prerelease
          --generate-notes
          --title "Release v4.1-${{ github.run_number }}"

      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/windows/XC-windows.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/ubuntu/XC-ubuntu.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/fedora/XC-fedora.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/macos/XC-macos.zip
          --repo "${{ github.repository }}"

          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/cli/XC-CLI.zip
          --repo "${{ github.repository }}"
