name: Build and Release Executable

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: 3.12.6

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable with flet
        run: flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description "XC Created By wikm" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./dist/XC.exe ./release/
          cp -r ./GUI-ver/subs ./release/
          powershell Compress-Archive -Path ./release/* -DestinationPath ./release/XC-windows.zip

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: windows-release
          path: ./release/XC-windows.zip

  build-cli:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./CLI/CLI.py ./release/
          cp -r ./CLI/convert.py ./release/
          cp -r ./CLI/const.py ./release/
          cp -r ./CLI/requirements.txt ./release/
          powershell Compress-Archive -Path ./release/* -DestinationPath ./release/XC-CLI.zip

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: cli-release
          path: ./release/XC-CLI.zip

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable with flet
        run: flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description "XC Created By wikm" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm

      - name: Zip executable and folders
        run: |
          mkdir release
          cp -r ./dist/XC ./release/
          cp -r ./GUI-ver/subs ./release/
          zip -r ./release/XC-ubuntu.zip ./release/

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-release
          path: ./release/XC-ubuntu.zip

  build-fedora:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if Docker is Installed
        run: docker --version || echo "Docker not found. Installing..."

      - name: Install Docker dependencies (if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

      - name: Add Dockerâ€™s official GPG key and repository
        run: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

      - name: Install Docker
        run: sudo apt-get install -y docker-ce

      - name: Start Docker
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Pull Fedora image
        run: docker pull fedora:latest

      - name: Run build in Fedora container
        run: |
          docker run -v ${{ github.workspace }}:/app -w /app fedora:latest bash -c "
            dnf update -y &&
            dnf install -y python3 python3-pip binutils zip gcc libffi-devel &&
            pip3 install --upgrade pip &&
            pip3 install pyinstaller &&
            pip3 install -r requirements.txt &&
            flet pack -i ./GUI-ver/icon.ico ./GUI-ver/GUI.py -n XC --product-name XC --file-description \"XC Created By wikm\" --product-version v4.1-${{ github.run_number }} --file-version v4.1-${{ github.run_number }} --company-name wikm &&
            ls -lah ./dist/
          "

      - name: Preprocess Release Files
        run: |
          mkdir -p release
          cp -r ./dist/XC ./release/
          zip -r ./release/XC-fedora.zip ./release/

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: fedora-release
          path: ./release/XC-fedora.zip
        

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow
          pip install -r requirements.txt
          pip install pyobjc-core pyobjc-framework-Cocoa

      - name: Build ARM64 executable
        run: |
          pyinstaller --onefile --name XC_arm64 \
              --windowed --icon=./GUI-ver/icon.ico \
              ./GUI-ver/GUI.py --distpath ./dist_arm64

      - name: Build x86_64 executable
        run: |
          arch -x86_64 pyinstaller --onefile --name XC_x86_64 \
              --windowed --icon=./GUI-ver/icon.ico \
              ./GUI-ver/GUI.py --distpath ./dist_x86_64

      - name: Package ARM64 executable
        run: |
          mkdir -p release/ARM64
          cp -R ./dist_arm64/XC_arm64 release/ARM64/
          cd release
          zip -r XC-macos-arm64.zip ARM64
          cd ..

      - name: Package x86_64 executable
        run: |
          mkdir -p release/x86_64
          cp -R ./dist_x86_64/XC_x86_64 release/x86_64/
          cd release
          zip -r XC-macos-x86_64.zip x86_64
          cd ..

      - name: Upload ARM64 Release
        uses: actions/upload-artifact@v3
        with:
          name: macos-arm64-release
          path: ./release/XC-macos-arm64.zip

      - name: Upload x86_64 Release
        uses: actions/upload-artifact@v3
        with:
          name: macos-x86_64-release
          path: ./release/XC-macos-x86_64.zip


  github-release:
    name: Upload to GitHub Release
    needs: [build-windows, build-ubuntu, build-fedora, build-macos , build-cli]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: windows-release
          path: ./release/windows/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-release
          path: ./release/ubuntu/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: fedora-release
          path: ./release/fedora/

      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: macos-release
          path: ./release/macos/
      
      - name: Download Release Assets
        uses: actions/download-artifact@v3
        with:
          name: cli-release
          path: ./release/cli/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release create
          "v4.1-${{ github.run_number }}"
          --repo "${{ github.repository }}"
          --notes ""
          --prerelease
          --generate-notes
          --title "Release v4.1-${{ github.run_number }}"

      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/windows/XC-windows.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/ubuntu/XC-ubuntu.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/fedora/XC-fedora.zip
          --repo "${{ github.repository }}"
          
          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/macos/XC-macos.zip
          --repo "${{ github.repository }}"

          gh release upload
          "v4.1-${{ github.run_number }}"
          ./release/cli/XC-CLI.zip
          --repo "${{ github.repository }}"
